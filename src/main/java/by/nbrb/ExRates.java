package by.nbrb;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.10 2014-03-31T15:31:30.732+03:00
 * Generated source version: 2.7.10
 * 
 */
@WebServiceClient(name = "ExRates", wsdlLocation = "file:/d:/Development/tmp/exrates.wsdl", targetNamespace = "http://www.nbrb.by/")
public class ExRates extends Service {

	public final static URL WSDL_LOCATION;

	public final static QName SERVICE = new QName("http://www.nbrb.by/",
			"ExRates");
	public final static QName ExRatesSoap12 = new QName("http://www.nbrb.by/",
			"ExRatesSoap12");
	public final static QName ExRatesSoap = new QName("http://www.nbrb.by/",
			"ExRatesSoap");
	static {
		// URL url = ExRates.class.getResource("exrates.wsdl");
		URL url = null;
		try {
			url = new URL("file:/d:/Development/tmp/exrates.wsdl");
		} catch (MalformedURLException e) {
			java.util.logging.Logger.getLogger(ExRates.class.getName()).log(
					java.util.logging.Level.INFO,
					"Can not initialize the default wsdl from {0}",
					"file:/D:/ec2_test/MDS_WSDL/wsdl/ExRates.wsdl");
		}

		WSDL_LOCATION = url;

		/*if (url == null) {
			url = ExRates.class.getClassLoader().getResource("exrates.wsdl");
		}
		if (url == null) {
			java.util.logging.Logger.getLogger(ExRates.class.getName()).log(
					java.util.logging.Level.INFO,
					"Can not initialize the default wsdl from {0}",
					"exrates.wsdl");
		}*/
		//WSDL_LOCATION = url;
	}

	public ExRates(URL wsdlLocation) {
		super(wsdlLocation, SERVICE);
	}

	public ExRates(URL wsdlLocation, QName serviceName) {
		super(wsdlLocation, serviceName);
	}

	public ExRates() {
		super(WSDL_LOCATION, SERVICE);
	}

	// This constructor requires JAX-WS API 2.2. You will need to endorse the
	// 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
	// 2.1
	// compliant code instead.
	public ExRates(WebServiceFeature... features) {
		super(WSDL_LOCATION, SERVICE, features);
	}

	// This constructor requires JAX-WS API 2.2. You will need to endorse the
	// 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
	// 2.1
	// compliant code instead.
	public ExRates(URL wsdlLocation, WebServiceFeature... features) {
		super(wsdlLocation, SERVICE, features);
	}

	// This constructor requires JAX-WS API 2.2. You will need to endorse the
	// 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS
	// 2.1
	// compliant code instead.
	public ExRates(URL wsdlLocation, QName serviceName,
			WebServiceFeature... features) {
		super(wsdlLocation, serviceName, features);
	}

	/**
	 * 
	 * @return returns ExRatesSoap
	 */
	@WebEndpoint(name = "ExRatesSoap12")
	public ExRatesSoap getExRatesSoap12() {
		return super.getPort(ExRatesSoap12, ExRatesSoap.class);
	}

	/**
	 * 
	 * @param features
	 *            A list of {@link javax.xml.ws.WebServiceFeature} to configure
	 *            on the proxy. Supported features not in the
	 *            <code>features</code> parameter will have their default
	 *            values.
	 * @return returns ExRatesSoap
	 */
	@WebEndpoint(name = "ExRatesSoap12")
	public ExRatesSoap getExRatesSoap12(WebServiceFeature... features) {
		return super.getPort(ExRatesSoap12, ExRatesSoap.class, features);
	}

	/**
	 * 
	 * @return returns ExRatesSoap
	 */
	@WebEndpoint(name = "ExRatesSoap")
	public ExRatesSoap getExRatesSoap() {
		return super.getPort(ExRatesSoap, ExRatesSoap.class);
	}

	/**
	 * 
	 * @param features
	 *            A list of {@link javax.xml.ws.WebServiceFeature} to configure
	 *            on the proxy. Supported features not in the
	 *            <code>features</code> parameter will have their default
	 *            values.
	 * @return returns ExRatesSoap
	 */
	@WebEndpoint(name = "ExRatesSoap")
	public ExRatesSoap getExRatesSoap(WebServiceFeature... features) {
		return super.getPort(ExRatesSoap, ExRatesSoap.class, features);
	}

}
